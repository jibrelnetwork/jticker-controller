openapi: 3.0.2
info:
  title: Jticker controller
  description: |
    Jticker controller service provides data managing and action triggering endpoints
  version: 2.2.1
paths:
  /storage/{host}/migrate:
    get:
      summary: Apply time series migrations
      responses:
        200:
          description: Time series migrations triggered
  /storage/{host}/query:
    get:
      summary: Do simple query to time series
      parameters:
        - name: query
          in: query
          requered: true
          description: Time series query
          schema:
            type: string
            example: show databases
      responses:
        200:
          description: Simple query response
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    type: string
                    enum:
                      - ok
                      - error
                  exception:
                    type: string
                  result:
                    type: object
                    example: {"0": [{"name": "_internal"}, {"name": "test"}, {"name": "service"}, {"name": "candles"}]}
        403:
          description: Missed `query` parameter
  /storage/{host}/raw/query:
    summary: Raw transparent proxy to time series storage
  /task/add:
    post:
      summary: Add grabber task
      requestBody:
        required: true
        content:
            application/json:
              schema:
                type: object
                properties:
                  providers:
                    type: array
                    example: ["bitfinex", "binance"]
                    items:
                      type: string
                  symbols:
                    type: array
                    example: ["BTCUSD", "ETHUSD"]
                    items:
                      type: string
                  from_dt:
                    type: number
                    example: 1234567
                  to_dt:
                    type: number
                    example: 1234568
                  interval:
                    type: number
                    example: 60
      responses:
        200:
          description: Task triggered
  /list_topics:
    get:
      summary: List kafka topics
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: bitfinex_BTCUSD_60
  /ws/add_candles:
    summary: Websocket add candles to kafka endpoint
  /ws/get_candles:
    summary: Websocket get candles from kafka endpoint
  /healthcheck:
    get:
      summary: Controller healthcheck
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                required:
                  - healthy
                  - version
                properties:
                  healthy:
                    type: boolean
                  version:
                    type: string
                    example: 2.2.1
